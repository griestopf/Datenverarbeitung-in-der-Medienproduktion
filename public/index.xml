<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Datenverarbeitung in der Medienproduktion</title>
    <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/</link>
    <description>Recent content on Datenverarbeitung in der Medienproduktion</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language><atom:link href="https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Allgemeines</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/general/</guid>
      <description>Vorlesungsunterlagen für die Veranstalltung Datenverarbeitung in der Medienproduktion.
Inhalt Automatisierung von Prozessen in der Medienproduktion Scripting von Addons mit Nutzerschnitstellen in der Computergrafik Algorithmische Erzeugung von Geometrien, Materialien und Texturen Auslesung und Nutzung von Daten für die Medienproduktion Zur praktischen Umsetzung dieser Themen wird die Software Blender und deren Python API eingesetzt
Telnahmevoraussetzungen Benötigt:
Grundkenntnisse im Programmieren Hilfreich:
Grundkentnisse in Python Gundkenntnisse im Umgang mit Blender oder anderer 3D-Software Geplante Veranstaltungsstruktur VS Nr.</description>
    </item>
    
    <item>
      <title>Links &amp; Literatur</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/links/</guid>
      <description>Python (Blender unabhängig) Art/Länge Titel Beschreibung Quelle The Python 3.7 Tutorial Einstieg in Python Offizielle Python 3.7 Documentation Einführung ins Programmieren mit Python Python Tutorial Auf Deutsch pythonbuch.com 111min Python Tutorial 2020 Einführung in alle wichtigen Python Funktionalitäten YouTube - Derek Banas Blender Scripting allgemein Art/Länge Titel Beschreibung Quelle 44min Python Crashcourse for Blender Guter Schnelleinstieg in Scripting mit Blender YouTube - Curtis Holt Blender Python API Dokumentation Offizielle Blender API Dokumentation Blender Python API Dokumentation 21x je 5-20min Blender Python - Scripting Series Ausführlichere Serie zu Blender Scripting YouTube - Darkfall 15x je 5-20min Scripting for Artists Sehr gute aufgearbeitete Serie zu Blender Scripting und Addon Entwicklung - teilweise jedoch kostenpflichtig Blender Cloud - Dr.</description>
    </item>
    
    <item>
      <title>Python Skripte aus der Vorlesung</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/course-python-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/course-python-scripts/</guid>
      <description>WiSe21/22 VL4 - Mesh Generierung Code-Zwischenstand aus der Vorlesung vom 26.10.21
# This program is free software; you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation; either version 3 of the License, or# (at your option) any later version.## This program is distributed in the hope that it will be useful, but# WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTIBILITY or FITNESS FOR A PARTICULAR PURPOSE.</description>
    </item>
    
    <item>
      <title>Python Style Guide</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/python-style-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/python-style-guide/</guid>
      <description>Um Code schnell lesbar für Dritte zu machen, sollte beim Programmieren gewissen Regeln gefolgt werden. Das betrifft die Benennung von Variablen, Imports, Einrückungen, Leerzeichen etc. Haltet euch beim Scripting mit Python für Blender daher so gut wie möglich an die unten verlinkten Stylingregeln.
Für Python ist der offizielle Styleguide das sogenannte PEP (Python Enhancement Proposal). Für Blender-Scripting sollte daher auch diesem Standard gefolgt werden. Spezifisch für Blender gibt es noch eine kurze Erweiterung zu PEP.</description>
    </item>
    
    <item>
      <title>Übung 1 - Basics</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter01/exercise01_b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter01/exercise01_b/</guid>
      <description>U1 </description>
    </item>
    
    <item>
      <title>Übung 1 - Basics</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter02/exercise01_b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter02/exercise01_b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Übung 1 - Basics</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter03/exercise01_b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter03/exercise01_b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Übung 1 - Basics</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter05/exercise01_b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter05/exercise01_b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Übung 1 - Basics</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter06/exercise01_b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter06/exercise01_b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Übung 1 - Blender Setup &amp; Scripting-Tools</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter01/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter01/exercise01_a/</guid>
      <description>Einführung Digitale Medienproduktionen Die meisten Prozesse in digitalen Medienproduktionen werden mit Hilfe hochspezialisierter Softwaretools durchgeführt. 3D-Modelle und Animationen, Post-Produktion, Color-Grading, Greenscreen Keying, Camera-Tracking usw. sind nur effizient mit Hilfe speziell dafür entwickelter Softwarepakete in Produktionen einsetzbar.
Ohne jeglichen Anspruch auf Vollständigkeit hier ein paar Beispiele häufig zum Einsatz kommender Werkzeuge:
Mayer Cinema 4D Houdini 3ds Max Nuke Blender After Effects DaVinci Resolve Effizienz bei Bewegtbild-Produktionen Speziell bei Bewegtbild-Medien genügt aber oft nicht die manuelle Bedienung dieser Werkzeuge.</description>
    </item>
    
    <item>
      <title>Übung 11 - Animation</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter11/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter11/exercise01_a/</guid>
      <description>Zur Generierung von Animationen stellt uns die Blender API verschiedene Möglichkeiten zur Verfügung. In folgender Übung werden wir uns die wichtigsten hiervon ansehen.
Keyframes Driver Scripted Expressions Custom Drivers App Handlers Keyframes Wir können die Blender API nutzen um per Script Keyframes zu setzen. Dafür wird die Methode keyframe_insert verwendet. Diese kann zum Beispiel von Objekten aus aufgerufen werden. Deren wichtigste Parameter sind data_path (Pfad zum Wert, der verwendet werden soll) und frame (Framenummer des Keyframes).</description>
    </item>
    
    <item>
      <title>Übung 2 - Blender API &amp; Visual Studio Code</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter02/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter02/exercise01_a/</guid>
      <description>Wenn Scripting-Projekte komplexer werden, wird es irgendwann sehr unpraktisch, nur den Blender-internen Texteditor einzusetzen. Zu diesem Zweck werden wir uns in dieser Übung die Entwicklung mit der IDE Visual Studio Code erleichtern.
Zudem werden wir die verschieden Untermodule der Blender API kennenlernen, um einen Burgturm-Generator zu programmieren.
Visual Studio Code Installiert zunächst Visual Studio Code. Installiert Python 3.7 Download für Windows hier Bei der Option, ob Python zum PATH hinzugefügt werden soll, wählt JA - Neustart evtl.</description>
    </item>
    
    <item>
      <title>Übung 3 - Operatoren &amp; Addons</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter03/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter03/exercise01_a/</guid>
      <description>Bisher sind alle Funktionalitäten, die wir mit unseren Scripten erstellt haben auch nur als solche ausführbar - als Script im Texteditor. In dieser Übung wollen wir das ändern und Blender selbst um eine Benutzeroberfläche für die Generierung unseres Turms erweitern
Operatoren Wir haben bereits die ops Kategorie des bpy Moduls kennengelernt. Nun wollen wir unseren eigenen Operator schreiben, der dann auch über die API aufgerufen und mit der F3-Suche gefunden werden kann.</description>
    </item>
    
    <item>
      <title>Übung 4 - Meshgenerierung</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter04/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter04/exercise01_a/</guid>
      <description>Basics der Meshgenerierung und -manipulation
Vorbereitung Aktiviere das vorinstallierte Addon MeasureIt Tols. Dieses erlaubt es uns, Indices, Positionen und andere Infos des selektierten Objekts im Viewport anzuzeigen.
Nach der Installation sind dessen Optionen in der Sidebar (Shortcut N → View → MeasureIt Tools → Mesh Debug) zu finden. Das Addon selbst muss noch mit Show ganz oben im Panel gestartet werden.
Zu den wichtigsten Aufgaben von Addons gehört die Manipulation und Generierung neuer Meshes.</description>
    </item>
    
    <item>
      <title>Übung 5 - Animation</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter05/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter05/exercise01_a/</guid>
      <description>Zur Generierung von Animationen stellt uns die Blender API verschiedene Möglichkeiten zur Verfügung. In folgender Übung werden wir uns die Wichtigsten hiervon ansehen.
Keyframes Driver Scripted Expressions Custom Drivers App Handlers Keyframes Wir können die Blender API nutzen um per Script Keyframes zu setzen. Dafür wird die Methode keyframe_insert verwendet. Diese kann zum Beispiel von Objekten aus aufgerufen werden. Deren wichtigste Parameter sind data_path (Pfad zum Wert, der verwendet werden soll) und frame (Framenummer des Keyframes).</description>
    </item>
    
    <item>
      <title>Übung 6 - Assetgenerierung - Das Rad nicht neu erfinden</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter06/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter06/exercise01_a/</guid>
      <description>Bei der Generierung von Assets kann es auf den ersten Blick naheliegend oder wünschenswert erscheinen, alles an Meshes selbst zu generieren. Damit macht man sich allerdings mehr Aufwand als nötig und hat zudem wahrscheinlich schlechter Performance und Nutzerfreudlichkeit, als wenn man einfach mit den bereits vorhandenen Werkzeugen arbeiten würde. Für uns als Addonentwickler ist es daher wichtig, die Möglichkeiten der Software mit der wir arbeiten gut zu kennen. Wichtig sind bei der Assetgenerierung vor allem die Modifier.</description>
    </item>
    
    <item>
      <title>Übung 7 - User Interfaces</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter07/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/chapter07/exercise01_a/</guid>
      <description>In Übung 3 haben wir uns schon mit der Erstellung von Operatoren beschäftigt und damit auch die ersten Schritte in Richtung GUI gemacht. In dieser Übung wollen wir unser eigenes Panel bauen und Operatoren zu Menüs hinzufügen.
Wir fangen damit an, unser Skript aus Übung 4 zum Generieren von Graßhalmen in einen Operator innerhalb eines Addons umzuwandeln. Seht euch dazu nocheinmal Übung 3 an. Wir wandeln wir die Konstanten (BLADES, HEIGHT, ANGLE_BASE&amp;hellip;.</description>
    </item>
    
  </channel>
</rss>
